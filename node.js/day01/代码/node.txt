1、什么叫node  什么叫设计模式

2、vue  是什么设计模式的（mvvm）

view （template  存放html的地方）
model (data 数据层)
viewmodel （专门存放逻辑的地方  生命周期  或者methods）


3、深度的聊(什么叫逻辑)
	逻辑  只有两个地方  除了循环就是判断

     只是需要知道  在哪个地方写循环  哪个地方写判断
	
 （箭头  往下指的 需要判断  往上指的部分  需要循环）


4、mvvm大家都知道是双向数据绑定的
	1、是哪两项
	2、是通过哪个板块  进行的双向数据绑定
		怎么实现的  监听和捕获
	
	Object.defineProperty()

-----------------------------------------------------------
后端语言啊  
	还是mvvm的设计模式嘛
	mvc的设计模式
	请你说出  mvc和 mvvm之间的关联  和区别


深度聊mvc
	view  专门存在html  css  js的地方
	controller 专门存放咱们逻辑的地方
	model 是咱们专门存放  数据库的地方

get  post  put  delete  需不需要传递参数

controller 是不是就需要 判断并且接受 前端传递过来的参数  参数的合法性
		登录逻辑  ( username  password)

model 这个层面 去查找我数据库有没有这条数据

当我model层处理完 结果  我要给controller 逻辑层  传递一个结果  

返回给view视图层  然后视图层做渲染  也就是循环数据

-----------------------------------------------------------------
整个项目的设计模式
mvc  和  mvvm  还有接口  并且  mvc  和mvvm  中间的关联点在哪

都是前后端分离的开发模式  也就是说  前端拿接口  后端写接口

mvc  当中  没有view 视图层了 把视图层 换成  接口了  也就是咱们用的api

进公司  都是这种架构的
1、前后端分离  分离的是什么 
	分离的是mvc 后台设计模式当中的view视图层
	代码的分离
2、关联点是什么
	api接口这个层面

3、全栈的角度去看
	整个项目  数据走向 是怎么走的

我通过  mvvm  当中的view视图层 
绑定数据到我的data层
我又通过事件  去触发我的函数  然后我函数当中用axios 去请求接口
接口去找到我的mvc当中的controller 处理后端的逻辑
controller 又找到我的model 处理数据库操作  也就是咱们所谓的sql语句
mysql 进行我本次操作数据库的记录

-------------------------------------------------------------------------
http （一次请求  一次反馈）
1、什么叫一次请求  什么叫一次反馈啊
	头部  还有请求报文

强调

// 双向数据绑定  也就是承上启下的作用

data(){
	return{
		username:''
		
	}

}

methods:{
	async login(){
		const {data:res} = await this.$http('');
		this.username = res.username
	}


}
